{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Programming Guide!","title":"Home"},{"location":"#welcome-to-the-programming-guide","text":"","title":"Welcome to the Programming Guide!"},{"location":"about/","text":"","title":"About"},{"location":"basics/","text":"Overview For the FIRST Robotics competition, the team will use the programming language Java. There are several rules we keep to try to keep our code clean and working. Key Project Files Robot.Java - Main robot class run when robot boots up OI.java - Maps commands to controller buttons Command files - Contains instructions for using the subsystem Subsystem files - Contain all the functions of a subsystem Programming Guidlines Comment your code Anything after // or surrounded by /* and */ is ignored by the program and will turn green. Use this to explain sections of code. Name objects appropriately in CamelCase All objects should be named CamelCase, where the first letter of each word is capitalized. The exception to this rule is methods, which the first word is lowercase: raiseElevatorComand No spaces in names Java doesnt like spaces. All statements must end with ; Blocks of code are contained within brackets { } . You can have blocks of code within blocks of code! In the below example, the colored circles mark the beginning { and ending } of each block of code. Note that the yellow and green blocks of code are within the red block of code, meaning that they may be run if the red block of code is run! The blue block of code is completely seperate.","title":"Java Programming Basics"},{"location":"basics/#overview","text":"For the FIRST Robotics competition, the team will use the programming language Java. There are several rules we keep to try to keep our code clean and working.","title":"Overview"},{"location":"basics/#key-project-files","text":"Robot.Java - Main robot class run when robot boots up OI.java - Maps commands to controller buttons Command files - Contains instructions for using the subsystem Subsystem files - Contain all the functions of a subsystem","title":"Key Project Files"},{"location":"basics/#programming-guidlines","text":"Comment your code Anything after // or surrounded by /* and */ is ignored by the program and will turn green. Use this to explain sections of code. Name objects appropriately in CamelCase All objects should be named CamelCase, where the first letter of each word is capitalized. The exception to this rule is methods, which the first word is lowercase: raiseElevatorComand No spaces in names Java doesnt like spaces. All statements must end with ; Blocks of code are contained within brackets { } . You can have blocks of code within blocks of code! In the below example, the colored circles mark the beginning { and ending } of each block of code. Note that the yellow and green blocks of code are within the red block of code, meaning that they may be run if the red block of code is run! The blue block of code is completely seperate.","title":"Programming Guidlines"},{"location":"commands/","text":"Overview Commands are used to execute robot functions. Commands call methods of subsystems to execute a task. Creating Commands To create a command, right click subsystems in the explorer and select Create a new class/command . Select command , and then name the command appropriately: NAME Command. For example, the command to stop an elevator should be named stopElevatorCommand . When you are done, a new .java file will be created under commands. Requiring Subsystems The next thing to think about is if your command requires a subsystem. Example: What happens if raiseElevatorCommand is run the same time as lowerElevatorCommand ? To ensure both never run at the same time, we should require the subsystem for both commands. If this command requires complete control of the subsystem, add the following code to this section (replace Elevator with subsystem name): requires(Elevator); Calling Subsystem Methods The command requests the subsystem to perform a function, such as turn on a motor. For example, the following code will call on subsystem Elevator , and it's method stopElevator using the following code: Robot.elevator.stopElevator(); The next question is, where should this code be placed? See the next section for details. Code Placement protected void initialize() - Code placed here will one run once when the command is run protected void execute() - Code placed here will run continously as long as the command is running protected void isFinished() - Code placed here determines when the command stops protected void end() - Code placed here runs once the command is over protected void interrupted() - Code placed here runs if the commands is interrupted by another command that requires the subsystem","title":"Programming Commmands"},{"location":"commands/#overview","text":"Commands are used to execute robot functions. Commands call methods of subsystems to execute a task.","title":"Overview"},{"location":"commands/#creating-commands","text":"To create a command, right click subsystems in the explorer and select Create a new class/command . Select command , and then name the command appropriately: NAME Command. For example, the command to stop an elevator should be named stopElevatorCommand . When you are done, a new .java file will be created under commands.","title":"Creating Commands"},{"location":"commands/#requiring-subsystems","text":"The next thing to think about is if your command requires a subsystem. Example: What happens if raiseElevatorCommand is run the same time as lowerElevatorCommand ? To ensure both never run at the same time, we should require the subsystem for both commands. If this command requires complete control of the subsystem, add the following code to this section (replace Elevator with subsystem name): requires(Elevator);","title":"Requiring Subsystems"},{"location":"commands/#calling-subsystem-methods","text":"The command requests the subsystem to perform a function, such as turn on a motor. For example, the following code will call on subsystem Elevator , and it's method stopElevator using the following code: Robot.elevator.stopElevator(); The next question is, where should this code be placed? See the next section for details.","title":"Calling Subsystem Methods"},{"location":"commands/#code-placement","text":"protected void initialize() - Code placed here will one run once when the command is run protected void execute() - Code placed here will run continously as long as the command is running protected void isFinished() - Code placed here determines when the command stops protected void end() - Code placed here runs once the command is over protected void interrupted() - Code placed here runs if the commands is interrupted by another command that requires the subsystem","title":"Code Placement"},{"location":"controllers/","text":"Overview Controllers are operated by human players in order to command the robot. In this section, you will create the controller and button objects in Java. If you have completed the command section , you can then assign commands to specific button. Creating a Joystick Object To create a joystick , you must declare the object and initialize it. The example below declares to the program that there is an object named CONTROLLERNAME that is a joystick. This should be placed under publc class OI public Joystick CONTROLLERNAME You must then instantiate (create) and object and assign it a port number. The port number tells the computer which USB slot this controller should be in. NAME = new Joystick(NUMBER) Creating Button Objects To create a button , you must declare the object and initialize it. Declaring tells the program that there is an object named NAME that is a button. This should be placed under public OI . Depending on the controller, each button (X,Y,A,B, etc.) is assigned to a number. JoystickButton buttonA = new JoystickButton(CONTROLLERNAME,BUTTONNUMBER) Change BUTTONNUMBER to the number of the button you want. Change CONTROLLERNAME to the name of the controller you want to assign the button to. Assigning Commands to Buttons NOTE: To complete this section, you must have completed the command section of the is guide. Depending on your design, you may want your buttons to behave differently. Here are 3 possible button types you can use, depending on your application. whenPressed - Command starts when button is pressed, and it runs until the command's isFinished method is satisfied. button.whenPressed(new ExampleCommand()); whileHeld - Command runs while button is held down, and is interrupted once the button is released. The command will then run the command's interupted method. button.whileHeld(new ExampleCommand()); whenReleased - Start command when button is released, and run until the command's isFinished method is satisfied. button.whenReleased(new ExampleCommand()); Example - Create controller and a button that will run the command raiseElevator public class OI { //Controller1 is a joystick public Joystick Controller1; public OI() { //Controller1 is assigned to USB port 0 Controller1 = new Joystick(0); //ButtonY (button 4) is on Controller1, JoystickButton buttonY = new JoystickButton(Controller1, 4); //Runs raiseElevator until button is released, which triggers raiseElevatorsCommand isInteruptted method buttonY.whileHeld(new raiseElevatorCommand()); } }","title":"Programming the Controller"},{"location":"controllers/#overview","text":"Controllers are operated by human players in order to command the robot. In this section, you will create the controller and button objects in Java. If you have completed the command section , you can then assign commands to specific button.","title":"Overview"},{"location":"controllers/#creating-a-joystick-object","text":"To create a joystick , you must declare the object and initialize it. The example below declares to the program that there is an object named CONTROLLERNAME that is a joystick. This should be placed under publc class OI public Joystick CONTROLLERNAME You must then instantiate (create) and object and assign it a port number. The port number tells the computer which USB slot this controller should be in. NAME = new Joystick(NUMBER)","title":"Creating a Joystick Object"},{"location":"controllers/#creating-button-objects","text":"To create a button , you must declare the object and initialize it. Declaring tells the program that there is an object named NAME that is a button. This should be placed under public OI . Depending on the controller, each button (X,Y,A,B, etc.) is assigned to a number. JoystickButton buttonA = new JoystickButton(CONTROLLERNAME,BUTTONNUMBER) Change BUTTONNUMBER to the number of the button you want. Change CONTROLLERNAME to the name of the controller you want to assign the button to.","title":"Creating Button Objects"},{"location":"controllers/#assigning-commands-to-buttons","text":"NOTE: To complete this section, you must have completed the command section of the is guide. Depending on your design, you may want your buttons to behave differently. Here are 3 possible button types you can use, depending on your application. whenPressed - Command starts when button is pressed, and it runs until the command's isFinished method is satisfied. button.whenPressed(new ExampleCommand()); whileHeld - Command runs while button is held down, and is interrupted once the button is released. The command will then run the command's interupted method. button.whileHeld(new ExampleCommand()); whenReleased - Start command when button is released, and run until the command's isFinished method is satisfied. button.whenReleased(new ExampleCommand());","title":"Assigning Commands to Buttons"},{"location":"controllers/#example-create-controller-and-a-button-that-will-run-the-command-raiseelevator","text":"public class OI { //Controller1 is a joystick public Joystick Controller1; public OI() { //Controller1 is assigned to USB port 0 Controller1 = new Joystick(0); //ButtonY (button 4) is on Controller1, JoystickButton buttonY = new JoystickButton(Controller1, 4); //Runs raiseElevator until button is released, which triggers raiseElevatorsCommand isInteruptted method buttonY.whileHeld(new raiseElevatorCommand()); } }","title":"Example - Create controller and a button that will run the command raiseElevator"},{"location":"design/","text":"Overview This page summarizes the overall steps required to program a robot. Programming is iterative - you may need to repeat many of these steps as the season continues. Design Strategy - What is the team strategy for autonomous mode? Subsystems What subsystems will you have on your robot? What does each subsystem need to do? What sensors should be used, if any? Controllers How many controllers is needed to control this robot? What commands should be mapped to which buttons? Programming Motor Assignments Motor controller CAN IDs (Work with Electrical Team) Methods that control motors must be created Commands need to be created Commands should call methods from subsystems Autonomous routines need to be created Will use CommandGroups of commands Testing Golden Rule: Your code doesnt work until you've tested it on the robot Example - 2017 Steamworks - Design Strategy - Our team strategy is to start from three possible locations, meaning we need three different autonomous modes. We will try to place a gear in autonomous mode. Subsystems Drivetrain Sensors - Encoder (measure distance), Gyro (measure angle) Functions Drive Straight Turn to an angle Turbo speed Stop Intake Sensors - Encoder (measure how open intake is) Open intake Close intake Commands Controllers Controller 1 - Driving Controller 2 - Control intake Example - 2017 Steamworks Programming Subsystems need to be created Drivetrain motors (4x) - 1,2,3,4 Intake motors (1x) - 5 Create methods Commands created Autonomous routines Left Position Auto - Drive straight 1m, turn -60 degrees, drive straight 1m, open intake Middle Position Auto - Drive straight 1m, open intake Right Position Auto - Drive straight 1m, turn 60 degrees, drive straight 1m, open intake","title":"FRC Programming Outline"},{"location":"design/#overview","text":"This page summarizes the overall steps required to program a robot. Programming is iterative - you may need to repeat many of these steps as the season continues.","title":"Overview"},{"location":"design/#design","text":"Strategy - What is the team strategy for autonomous mode? Subsystems What subsystems will you have on your robot? What does each subsystem need to do? What sensors should be used, if any? Controllers How many controllers is needed to control this robot? What commands should be mapped to which buttons?","title":"Design"},{"location":"design/#programming","text":"Motor Assignments Motor controller CAN IDs (Work with Electrical Team) Methods that control motors must be created Commands need to be created Commands should call methods from subsystems Autonomous routines need to be created Will use CommandGroups of commands","title":"Programming"},{"location":"design/#testing","text":"Golden Rule: Your code doesnt work until you've tested it on the robot","title":"Testing"},{"location":"design/#example-2017-steamworks-design","text":"Strategy - Our team strategy is to start from three possible locations, meaning we need three different autonomous modes. We will try to place a gear in autonomous mode. Subsystems Drivetrain Sensors - Encoder (measure distance), Gyro (measure angle) Functions Drive Straight Turn to an angle Turbo speed Stop Intake Sensors - Encoder (measure how open intake is) Open intake Close intake Commands Controllers Controller 1 - Driving Controller 2 - Control intake","title":"Example - 2017 Steamworks - Design"},{"location":"design/#example-2017-steamworks-programming","text":"Subsystems need to be created Drivetrain motors (4x) - 1,2,3,4 Intake motors (1x) - 5 Create methods Commands created Autonomous routines Left Position Auto - Drive straight 1m, turn -60 degrees, drive straight 1m, open intake Middle Position Auto - Drive straight 1m, open intake Right Position Auto - Drive straight 1m, turn 60 degrees, drive straight 1m, open intake","title":"Example - 2017 Steamworks Programming"},{"location":"pneumatics/","text":"Overview This page summarizes the overall steps required to program a pneumatic system. Pneumatics are controlled by the Pneumatic Control Module, which is wired to the pneumatic components. Like any other actuator, the compressor and pneumatic solenoid (the thing that controls the cylinder ) need to be declared. Operating a compressor A compressor pumps air into the system. Instantiating a compressor The number corresponds with the Pneumatic Control Module (PCM) Node ID Compressor COMPRESSORNAME = new Compressor(0); Starting a compressor COMPRESSORNAME.setClosedLoopControl(true); Stopping a compressor COMPRESSORNAME.setClosedLoopControl(false); Reading compressor status boolean enabled = COMPRESSORNAME.enabled boolean pressureSwitch = COMPRESSORNAME.getPressureSwitchValue(); double current = COMPRESSORNAME.getCompressorCurrent(); Single Solenoids A single solenoid valve has one solenoid, and shifts when voltage is supplied to that solenoid. When voltage is removed, it shifts back to a \u201chome\u201d position. Solenoid exampleSolenoid = newSolenoid(1); exampleSolenoid.set(true); exampleSolenoid.set(false); The number corresponds with the Pneumatic Control Module (PCM) Node ID Double Solenoids A double solenoid has two solenoids, and when voltage is supplied to one (and not the other) the valve shifts. What this means is that the cylinder has no home position, so when power is cut, the valve will stay where it was at that time, and the cylinder will continue to do work in the direction is was working in Forward Channel - 1st channel, kforward Reverse channel - 2nd channel, kReverse DoubleSolenoid exampleDouble = new DoubleSolenoid(1, 2); exampleDouble.set(DoubleSolenoid.Value.kOff); exampleDouble.set(DoubleSolenoid.Value.kForward); exampleDouble.set(DoubleSolenoid.Value.kReverse); The number corresponds with the Pneumatic Control Module (PCM) Node ID","title":"Pneumatics"},{"location":"pneumatics/#overview","text":"This page summarizes the overall steps required to program a pneumatic system. Pneumatics are controlled by the Pneumatic Control Module, which is wired to the pneumatic components. Like any other actuator, the compressor and pneumatic solenoid (the thing that controls the cylinder ) need to be declared.","title":"Overview"},{"location":"pneumatics/#operating-a-compressor","text":"A compressor pumps air into the system. Instantiating a compressor The number corresponds with the Pneumatic Control Module (PCM) Node ID Compressor COMPRESSORNAME = new Compressor(0); Starting a compressor COMPRESSORNAME.setClosedLoopControl(true); Stopping a compressor COMPRESSORNAME.setClosedLoopControl(false);","title":"Operating a compressor"},{"location":"pneumatics/#reading-compressor-status","text":"boolean enabled = COMPRESSORNAME.enabled boolean pressureSwitch = COMPRESSORNAME.getPressureSwitchValue(); double current = COMPRESSORNAME.getCompressorCurrent();","title":"Reading compressor status"},{"location":"pneumatics/#single-solenoids","text":"A single solenoid valve has one solenoid, and shifts when voltage is supplied to that solenoid. When voltage is removed, it shifts back to a \u201chome\u201d position. Solenoid exampleSolenoid = newSolenoid(1); exampleSolenoid.set(true); exampleSolenoid.set(false); The number corresponds with the Pneumatic Control Module (PCM) Node ID","title":"Single Solenoids"},{"location":"pneumatics/#double-solenoids","text":"A double solenoid has two solenoids, and when voltage is supplied to one (and not the other) the valve shifts. What this means is that the cylinder has no home position, so when power is cut, the valve will stay where it was at that time, and the cylinder will continue to do work in the direction is was working in Forward Channel - 1st channel, kforward Reverse channel - 2nd channel, kReverse DoubleSolenoid exampleDouble = new DoubleSolenoid(1, 2); exampleDouble.set(DoubleSolenoid.Value.kOff); exampleDouble.set(DoubleSolenoid.Value.kForward); exampleDouble.set(DoubleSolenoid.Value.kReverse); The number corresponds with the Pneumatic Control Module (PCM) Node ID","title":"Double Solenoids"},{"location":"subsystems/","text":"Overview Subsystems represent a major component of the robot, such as the drivetrain, an arm, or a shooter. The methods (or functions) within a subsystem control specific motors. In this section, you will create a subsytem and create motor controller/sensor objects. You will then create the methods that control these components. Creating Subsystems To create a subsystem, right click subsystems in the explorer and select Create a new class/command . Select subsystem , and then name the subsystem appropriately. After you have finished, you have created a subsystem. In the example below, I created a \"Elevator\" subsystem. Adding Motor Controllers/Sensors Now that we have a subsystem, we will need to define the motor controllers and sensors. In Java, you must first create the object. There are two things you need to know: How many motor controllers do you need to add? (A 4 motor drivetrain requires 4 motor controllers) What type of motor controller is being used? (TalonSRX, VictorSPX, Sparks, etc.) If you are using TalonSRX Declaration (assign variable name to object) - Place this under public class NAME extends Subsystem private WPI_TalonSRX leftElevatorMotor; Instantiate/Initializing (create an object) The number corresponds to the CANId of the motor controller. Place this leftElevatorMotor = new WPI_TalonSRX(1); If you are using VictorSPX Declaration (assign variable name to object) - Place this under public class NAME extends Subsystem private WPI_VictorSPX leftElevatorMotor; Instantiate/Initializing (create an object) The number corresponds to the CANId of the motor controller. leftElevatorMotor = new WPI_VictorSPX(1); Creating Methods A method is a function of the subsystem. For example, some functions of an elevator may be to lift to a certain height, lower, or to stop. To make an elevator stop, the example method is created to stop the elevator. public void stopElevator(){ leftElevatorMotor.set(0.0); } This sets the elevator motor that we created earlier at 0 percent voltage.","title":"Programming Subsystems"},{"location":"subsystems/#overview","text":"Subsystems represent a major component of the robot, such as the drivetrain, an arm, or a shooter. The methods (or functions) within a subsystem control specific motors. In this section, you will create a subsytem and create motor controller/sensor objects. You will then create the methods that control these components.","title":"Overview"},{"location":"subsystems/#creating-subsystems","text":"To create a subsystem, right click subsystems in the explorer and select Create a new class/command . Select subsystem , and then name the subsystem appropriately. After you have finished, you have created a subsystem. In the example below, I created a \"Elevator\" subsystem.","title":"Creating Subsystems"},{"location":"subsystems/#adding-motor-controllerssensors","text":"Now that we have a subsystem, we will need to define the motor controllers and sensors. In Java, you must first create the object. There are two things you need to know: How many motor controllers do you need to add? (A 4 motor drivetrain requires 4 motor controllers) What type of motor controller is being used? (TalonSRX, VictorSPX, Sparks, etc.)","title":"Adding Motor Controllers/Sensors"},{"location":"subsystems/#if-you-are-using-talonsrx","text":"Declaration (assign variable name to object) - Place this under public class NAME extends Subsystem private WPI_TalonSRX leftElevatorMotor; Instantiate/Initializing (create an object) The number corresponds to the CANId of the motor controller. Place this leftElevatorMotor = new WPI_TalonSRX(1);","title":"If you are using TalonSRX"},{"location":"subsystems/#if-you-are-using-victorspx","text":"Declaration (assign variable name to object) - Place this under public class NAME extends Subsystem private WPI_VictorSPX leftElevatorMotor; Instantiate/Initializing (create an object) The number corresponds to the CANId of the motor controller. leftElevatorMotor = new WPI_VictorSPX(1);","title":"If you are using VictorSPX"},{"location":"subsystems/#creating-methods","text":"A method is a function of the subsystem. For example, some functions of an elevator may be to lift to a certain height, lower, or to stop. To make an elevator stop, the example method is created to stop the elevator. public void stopElevator(){ leftElevatorMotor.set(0.0); } This sets the elevator motor that we created earlier at 0 percent voltage.","title":"Creating Methods"},{"location":"update/","text":"Overview Every year, new software is released. Our robot electronics need to be updated to have the latest changes. Installing Java Development Environment We use the program VSCode to program our robot. This only needs to be done for new computers that do not have VSCode. https://wpilib.screenstepslive.com/s/currentCS/m/getting_started/l/999999-installing-c-and-java-development-tools-for-frc Installing FRC Update Suite FRC Suite includes all of the FRC specific updates for the season. You will need an NI account and the license key to complete this step. See lead mentor for this information. https://wpilib.screenstepslive.com/s/currentCS/m/getting_started/l/1004055-installing-the-frc-update-suite-all-languages Imaging RoboRio The RoboRio is the brain of the robot, and needs to be updated for the new season. To do this step, the computer must have the FRC Update Suite installed. The RoboRio must also be correctly powered to the Power Distribution Panel. https://wpilib.screenstepslive.com/s/currentCS/m/getting_started/l/1009233-imaging-your-roborio Importing CTRE libraries and installing webdash plugin The CTRE library includes updates to software if you use TalonSRXs or Victor SPXs. Download and run the latest CTRE Pheonix Framework Installer. To install the web plugin, plug in the usb cable for imaging the RoboRio into the computer and Roborio. Open the Pheonix lifeboat utility, select roboRio upgrade tab, and select update Rio Web-based config http://www.ctr-electronics.com/control-system/hro.html#product_tabs_technical_resources Imaging Radio The Radio is how the laptop communicates to the Robot, and needs to be updated. https://wpilib.screenstepslive.com/s/currentCS/m/getting_started/l/144986-programming-your-radio","title":"Updating Hardware"},{"location":"update/#overview","text":"Every year, new software is released. Our robot electronics need to be updated to have the latest changes.","title":"Overview"},{"location":"update/#installing-java-development-environment","text":"We use the program VSCode to program our robot. This only needs to be done for new computers that do not have VSCode. https://wpilib.screenstepslive.com/s/currentCS/m/getting_started/l/999999-installing-c-and-java-development-tools-for-frc","title":"Installing Java Development Environment"},{"location":"update/#installing-frc-update-suite","text":"FRC Suite includes all of the FRC specific updates for the season. You will need an NI account and the license key to complete this step. See lead mentor for this information. https://wpilib.screenstepslive.com/s/currentCS/m/getting_started/l/1004055-installing-the-frc-update-suite-all-languages","title":"Installing FRC Update Suite"},{"location":"update/#imaging-roborio","text":"The RoboRio is the brain of the robot, and needs to be updated for the new season. To do this step, the computer must have the FRC Update Suite installed. The RoboRio must also be correctly powered to the Power Distribution Panel. https://wpilib.screenstepslive.com/s/currentCS/m/getting_started/l/1009233-imaging-your-roborio","title":"Imaging RoboRio"},{"location":"update/#importing-ctre-libraries-and-installing-webdash-plugin","text":"The CTRE library includes updates to software if you use TalonSRXs or Victor SPXs. Download and run the latest CTRE Pheonix Framework Installer. To install the web plugin, plug in the usb cable for imaging the RoboRio into the computer and Roborio. Open the Pheonix lifeboat utility, select roboRio upgrade tab, and select update Rio Web-based config http://www.ctr-electronics.com/control-system/hro.html#product_tabs_technical_resources","title":"Importing CTRE libraries and installing webdash plugin"},{"location":"update/#imaging-radio","text":"The Radio is how the laptop communicates to the Robot, and needs to be updated. https://wpilib.screenstepslive.com/s/currentCS/m/getting_started/l/144986-programming-your-radio","title":"Imaging Radio"},{"location":"vision/","text":"Overview Commands are used to execute robot functions. Commands call methods of subsystems to execute a task. Creating Commands To create a command, right click subsystems in the explorer and select Create a new class/command . Select command , and then name the command appropriately: NAME Command. For example, the command to stop an elevator should be named stopElevator Command. When you are done, a new .java file will be created under commands. Requiring Subsystems The next thing to think about is if your command requires a subsystem. Example: What happens if raiseElevatorCommand is run the same time as lowerElevatorCommand ? To ensure both never run at the same time, we should require the subsystem for both commands. If this command requires complete control of the subsystem, add the following code to this section (replace Elevator with subsystem name): requires(Elevator); Calling Subsystem Methods The command requests the subsystem to perform a function, such as turn on a motor. For example, the following code will call on subsystem Elevator , and it's method stopElevator using the following code: elevator.stopElevator(); The next question is, where should this code be placed? See the next section for details. Code Placement protected void initialize() - Code placed here will one run once when the command is run protected void execute() - Code placed here will run continously as long as the command is running protected void isFinished() - Code placed here determines when the command stops protected void end() - Code placed here runs once the command is over protected void interrupted() - Code placed here runs if the commands is interrupted by another command that requires the subsystem","title":"Vision"},{"location":"vision/#overview","text":"Commands are used to execute robot functions. Commands call methods of subsystems to execute a task.","title":"Overview"},{"location":"vision/#creating-commands","text":"To create a command, right click subsystems in the explorer and select Create a new class/command . Select command , and then name the command appropriately: NAME Command. For example, the command to stop an elevator should be named stopElevator Command. When you are done, a new .java file will be created under commands.","title":"Creating Commands"},{"location":"vision/#requiring-subsystems","text":"The next thing to think about is if your command requires a subsystem. Example: What happens if raiseElevatorCommand is run the same time as lowerElevatorCommand ? To ensure both never run at the same time, we should require the subsystem for both commands. If this command requires complete control of the subsystem, add the following code to this section (replace Elevator with subsystem name): requires(Elevator);","title":"Requiring Subsystems"},{"location":"vision/#calling-subsystem-methods","text":"The command requests the subsystem to perform a function, such as turn on a motor. For example, the following code will call on subsystem Elevator , and it's method stopElevator using the following code: elevator.stopElevator(); The next question is, where should this code be placed? See the next section for details.","title":"Calling Subsystem Methods"},{"location":"vision/#code-placement","text":"protected void initialize() - Code placed here will one run once when the command is run protected void execute() - Code placed here will run continously as long as the command is running protected void isFinished() - Code placed here determines when the command stops protected void end() - Code placed here runs once the command is over protected void interrupted() - Code placed here runs if the commands is interrupted by another command that requires the subsystem","title":"Code Placement"}]}