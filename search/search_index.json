{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Programming Guide!","title":"Home"},{"location":"#welcome-to-the-programming-guide","text":"","title":"Welcome to the Programming Guide!"},{"location":"about/","text":"To Do Sensors Electrical Wiring Vision","title":"About"},{"location":"about/#to-do","text":"Sensors Electrical Wiring Vision","title":"To Do"},{"location":"autonomous/","text":"Overview The first stage of the game usually involves an autonomus phase where Robots must act on their own without human intervention. The first exception to this rule is in 2019 - Deep Space. Declaration Command autonomousCommand; SendableChooser<Command> chooser = new SendableChooser<>(); Adding Autonomous Options You will need to add your autonomous commands to the SmartDashboard in order to choose between them. Place this code in the method that runs when the robot is first initialized within Robot.Java . chooser.addDefault(\"Autonomous Command\", new AutonomousCommand()); positionChooser.addDefault(\"Left\", \"left\"); positionChooser.addObject(\"Middle\", \"middle\"); positionChooser.addObject(\"Right\", \"right\"); positionChooser.addObject(\"Cross Line\", \"cross\"); SmartDashboard.putData(\"Auto Mode\", positionChooser); Run Autonomous Command Place this code where the autonomous phase is initalized within Robot.Java . public void autonomousInit() { autonomousCommand = new AUTONOMOUSCOMMANDNAME(); if (autonomousCommand != null) autonomousCommand.start();","title":"Autonomous (In Progress)"},{"location":"autonomous/#overview","text":"The first stage of the game usually involves an autonomus phase where Robots must act on their own without human intervention. The first exception to this rule is in 2019 - Deep Space.","title":"Overview"},{"location":"autonomous/#declaration","text":"Command autonomousCommand; SendableChooser<Command> chooser = new SendableChooser<>();","title":"Declaration"},{"location":"autonomous/#adding-autonomous-options","text":"You will need to add your autonomous commands to the SmartDashboard in order to choose between them. Place this code in the method that runs when the robot is first initialized within Robot.Java . chooser.addDefault(\"Autonomous Command\", new AutonomousCommand()); positionChooser.addDefault(\"Left\", \"left\"); positionChooser.addObject(\"Middle\", \"middle\"); positionChooser.addObject(\"Right\", \"right\"); positionChooser.addObject(\"Cross Line\", \"cross\"); SmartDashboard.putData(\"Auto Mode\", positionChooser);","title":"Adding Autonomous Options"},{"location":"autonomous/#run-autonomous-command","text":"Place this code where the autonomous phase is initalized within Robot.Java . public void autonomousInit() { autonomousCommand = new AUTONOMOUSCOMMANDNAME(); if (autonomousCommand != null) autonomousCommand.start();","title":"Run Autonomous Command"},{"location":"basics/","text":"Overview For the FIRST Robotics competition, the team will use the programming language Java . There are several rules we keep to try to keep our code clean and working. Key Project Files Robot.java - Main robot class run when robot boots up OI.java - Operator Interface; Assigns commands to controller buttons Command files - Requests action from subsystem files Subsystem files - Contain all possible actions of the subsystem Programming Guidlines Comment your code Anything after // or surrounded by /* and */ is ignored by the program and will turn green. Use this to explain sections of code. Name objects appropriately in CamelCase All objects should be named CamelCase, where the first letter of each word is capitalized. The exception to this rule is methods, which the first word is lowercase: raiseElevatorComand No spaces in names Java doesnt like spaces. All statements must end with ; Blocks of code are contained within brackets { } . You can have blocks of code within blocks of code! In the below example, the colored circles mark the beginning { and ending } of each block of code. Note that the yellow and green blocks of code are within the red block of code, meaning that they may be run if the red block of code is run! The blue block of code is completely seperate.","title":"Java Programming Basics"},{"location":"basics/#overview","text":"For the FIRST Robotics competition, the team will use the programming language Java . There are several rules we keep to try to keep our code clean and working.","title":"Overview"},{"location":"basics/#key-project-files","text":"Robot.java - Main robot class run when robot boots up OI.java - Operator Interface; Assigns commands to controller buttons Command files - Requests action from subsystem files Subsystem files - Contain all possible actions of the subsystem","title":"Key Project Files"},{"location":"basics/#programming-guidlines","text":"Comment your code Anything after // or surrounded by /* and */ is ignored by the program and will turn green. Use this to explain sections of code. Name objects appropriately in CamelCase All objects should be named CamelCase, where the first letter of each word is capitalized. The exception to this rule is methods, which the first word is lowercase: raiseElevatorComand No spaces in names Java doesnt like spaces. All statements must end with ; Blocks of code are contained within brackets { } . You can have blocks of code within blocks of code! In the below example, the colored circles mark the beginning { and ending } of each block of code. Note that the yellow and green blocks of code are within the red block of code, meaning that they may be run if the red block of code is run! The blue block of code is completely seperate.","title":"Programming Guidlines"},{"location":"camera/","text":"Overview A camera is used to provide vision to the driver. The camera is connected directly to the RoboRio via USB port. Importing You will need to import some existing libraries to utilize the camera. This will go at the top of Robot.java along with the other imports. import edu.wpi.first.wpilibj.CameraServer; import edu.wpi.first.wpilibj.IterativeRobot; Adding a Camera You will want to place this code when the Robot first starts up. Hint: The first file run is Robot.java . What method within this file is run first? Declaration & Start Recording USBCamera CAMERANAME = CameraServer.getInstance().startAutomaticCapture(); Change Resolution and Frame Rate There is a limit on wireless bandwidth, so one MAY need to adjust quality and frame rate (FPS). camera1.setResolution(320, 240); camera1.setFPS(10);","title":"Camera"},{"location":"camera/#overview","text":"A camera is used to provide vision to the driver. The camera is connected directly to the RoboRio via USB port.","title":"Overview"},{"location":"camera/#importing","text":"You will need to import some existing libraries to utilize the camera. This will go at the top of Robot.java along with the other imports. import edu.wpi.first.wpilibj.CameraServer; import edu.wpi.first.wpilibj.IterativeRobot;","title":"Importing"},{"location":"camera/#adding-a-camera","text":"You will want to place this code when the Robot first starts up. Hint: The first file run is Robot.java . What method within this file is run first?","title":"Adding a Camera"},{"location":"camera/#declaration-start-recording","text":"USBCamera CAMERANAME = CameraServer.getInstance().startAutomaticCapture();","title":"Declaration &amp; Start Recording"},{"location":"camera/#change-resolution-and-frame-rate","text":"There is a limit on wireless bandwidth, so one MAY need to adjust quality and frame rate (FPS). camera1.setResolution(320, 240); camera1.setFPS(10);","title":"Change Resolution and Frame Rate"},{"location":"commands/","text":"Overview Commands are used to execute robot functions. Commands call methods of subsystems to execute a task. Creating Commands To create a command, right click subsystems in the explorer and select Create a new class/command . Select command , and then name the command appropriately: NAME Command. For example, the command to stop an elevator should be named stopElevatorCommand . When you are done, a new .java file will be created under commands. Requiring Subsystems The next thing to think about is if your command requires a subsystem. Example: What happens if raiseElevatorCommand is run the same time as lowerElevatorCommand ? To ensure both never run at the same time, we should require the subsystem for both commands. If this command requires complete control of the subsystem, add the following code to this section (replace Elevator with subsystem name): requires(Elevator); Calling Subsystem Methods The command requests the subsystem to perform a function, such as turn on a motor. For example, the following code will call on subsystem Elevator , and it's method stopElevator using the following code: Robot.elevator.stopElevator(); The next question is, where should this code be placed? See the next section for details. Code Placement protected void initialize() - Code placed here will one run once when the command is run protected void execute() - Code placed here will run continously as long as the command is running protected void isFinished() - Code placed here determines when the command stops protected void end() - Code placed here runs once the command is over protected void interrupted() - Code placed here runs if the commands is interrupted by another command that requires the subsystem","title":"Programming Commmands"},{"location":"commands/#overview","text":"Commands are used to execute robot functions. Commands call methods of subsystems to execute a task.","title":"Overview"},{"location":"commands/#creating-commands","text":"To create a command, right click subsystems in the explorer and select Create a new class/command . Select command , and then name the command appropriately: NAME Command. For example, the command to stop an elevator should be named stopElevatorCommand . When you are done, a new .java file will be created under commands.","title":"Creating Commands"},{"location":"commands/#requiring-subsystems","text":"The next thing to think about is if your command requires a subsystem. Example: What happens if raiseElevatorCommand is run the same time as lowerElevatorCommand ? To ensure both never run at the same time, we should require the subsystem for both commands. If this command requires complete control of the subsystem, add the following code to this section (replace Elevator with subsystem name): requires(Elevator);","title":"Requiring Subsystems"},{"location":"commands/#calling-subsystem-methods","text":"The command requests the subsystem to perform a function, such as turn on a motor. For example, the following code will call on subsystem Elevator , and it's method stopElevator using the following code: Robot.elevator.stopElevator(); The next question is, where should this code be placed? See the next section for details.","title":"Calling Subsystem Methods"},{"location":"commands/#code-placement","text":"protected void initialize() - Code placed here will one run once when the command is run protected void execute() - Code placed here will run continously as long as the command is running protected void isFinished() - Code placed here determines when the command stops protected void end() - Code placed here runs once the command is over protected void interrupted() - Code placed here runs if the commands is interrupted by another command that requires the subsystem","title":"Code Placement"},{"location":"control/","text":"Overview Control flow statements are used to run pieces of code that are dependent on the situation. Example 1: You want to run a different autonomous mode depending on your starting location Example 2: You want to stop the robot elevator from rising past a certain point To do this, you will need to add logic. For FRC, you will typically only need if-then-else statements. Operators Operator Meaning && AND == Equal to >= Greater than or equal to <= Less than or equal to If-Then-Else if (CONDITION1) { CODE_BLOCK_1 } else { CODE_BLOCK_2 } If CONDITION1 is true , then the code between { and } is run ( CODE_BLOCK_1 ). If false , the code between { and } after the else is run ( CODE_BLOCK_2 ). Example if (testscore >= 90) { grade = 'A'; } else if (testscore >= 80) { grade = 'B'; } else if (testscore >= 70) { grade = 'C'; } else if (testscore >= 60) { grade = 'D'; } else { grade = 'F'; }","title":"Control Flow Statements (In Progress)"},{"location":"control/#overview","text":"Control flow statements are used to run pieces of code that are dependent on the situation. Example 1: You want to run a different autonomous mode depending on your starting location Example 2: You want to stop the robot elevator from rising past a certain point To do this, you will need to add logic. For FRC, you will typically only need if-then-else statements.","title":"Overview"},{"location":"control/#operators","text":"Operator Meaning && AND == Equal to >= Greater than or equal to <= Less than or equal to","title":"Operators"},{"location":"control/#if-then-else","text":"if (CONDITION1) { CODE_BLOCK_1 } else { CODE_BLOCK_2 } If CONDITION1 is true , then the code between { and } is run ( CODE_BLOCK_1 ). If false , the code between { and } after the else is run ( CODE_BLOCK_2 ).","title":"If-Then-Else"},{"location":"control/#example","text":"if (testscore >= 90) { grade = 'A'; } else if (testscore >= 80) { grade = 'B'; } else if (testscore >= 70) { grade = 'C'; } else if (testscore >= 60) { grade = 'D'; } else { grade = 'F'; }","title":"Example"},{"location":"controllers/","text":"Overview Controllers are operated by human players in order to command the robot. In this section, you will create the controller and button objects in Java. If you have completed the command section , you can then assign commands to specific button. Creating a Joystick Object To create a joystick , you must declare the object and initialize it. The example below declares to the program that there is an object named CONTROLLERNAME that is a joystick. This should be placed under publc class OI public Joystick CONTROLLERNAME You must then instantiate (create) and object and assign it a port number. The port number tells the computer which USB slot this controller should be in. NAME = new Joystick(NUMBER) Creating Button Objects To create a button , you must declare the object and initialize it. Declaring tells the program that there is an object named NAME that is a button. This should be placed under public OI . Depending on the controller, each button (X,Y,A,B, etc.) is assigned to a number. JoystickButton buttonA = new JoystickButton(CONTROLLERNAME,BUTTONNUMBER) Change BUTTONNUMBER to the number of the button you want. Change CONTROLLERNAME to the name of the controller you want to assign the button to. Assigning Commands to Buttons NOTE: To complete this section, you must have completed the command section of the is guide. Depending on your design, you may want your buttons to behave differently. Here are 3 possible button types you can use, depending on your application. whenPressed - Command starts when button is pressed, and it runs until the command's isFinished method is satisfied. button.whenPressed(new ExampleCommand()); whileHeld - Command runs while button is held down, and is interrupted once the button is released. The command will then run the command's interupted method. button.whileHeld(new ExampleCommand()); whenReleased - Start command when button is released, and run until the command's isFinished method is satisfied. button.whenReleased(new ExampleCommand()); Example - Create controller and a button that will run the command raiseElevator In the example below, controller1 is assigned to usb port 0 . The buttonY corresponds to button 4 on the controller. public class OI { public Joystick Controller1; public OI() { Controller1 = new Joystick(0); JoystickButton buttonY = new JoystickButton(Controller1, 4); buttonY.whileHeld(new raiseElevatorCommand()); } }","title":"Programming the Controller"},{"location":"controllers/#overview","text":"Controllers are operated by human players in order to command the robot. In this section, you will create the controller and button objects in Java. If you have completed the command section , you can then assign commands to specific button.","title":"Overview"},{"location":"controllers/#creating-a-joystick-object","text":"To create a joystick , you must declare the object and initialize it. The example below declares to the program that there is an object named CONTROLLERNAME that is a joystick. This should be placed under publc class OI public Joystick CONTROLLERNAME You must then instantiate (create) and object and assign it a port number. The port number tells the computer which USB slot this controller should be in. NAME = new Joystick(NUMBER)","title":"Creating a Joystick Object"},{"location":"controllers/#creating-button-objects","text":"To create a button , you must declare the object and initialize it. Declaring tells the program that there is an object named NAME that is a button. This should be placed under public OI . Depending on the controller, each button (X,Y,A,B, etc.) is assigned to a number. JoystickButton buttonA = new JoystickButton(CONTROLLERNAME,BUTTONNUMBER) Change BUTTONNUMBER to the number of the button you want. Change CONTROLLERNAME to the name of the controller you want to assign the button to.","title":"Creating Button Objects"},{"location":"controllers/#assigning-commands-to-buttons","text":"NOTE: To complete this section, you must have completed the command section of the is guide. Depending on your design, you may want your buttons to behave differently. Here are 3 possible button types you can use, depending on your application. whenPressed - Command starts when button is pressed, and it runs until the command's isFinished method is satisfied. button.whenPressed(new ExampleCommand()); whileHeld - Command runs while button is held down, and is interrupted once the button is released. The command will then run the command's interupted method. button.whileHeld(new ExampleCommand()); whenReleased - Start command when button is released, and run until the command's isFinished method is satisfied. button.whenReleased(new ExampleCommand());","title":"Assigning Commands to Buttons"},{"location":"controllers/#example-create-controller-and-a-button-that-will-run-the-command-raiseelevator","text":"In the example below, controller1 is assigned to usb port 0 . The buttonY corresponds to button 4 on the controller. public class OI { public Joystick Controller1; public OI() { Controller1 = new Joystick(0); JoystickButton buttonY = new JoystickButton(Controller1, 4); buttonY.whileHeld(new raiseElevatorCommand()); } }","title":"Example - Create controller and a button that will run the command raiseElevator"},{"location":"design/","text":"Overview This page summarizes the overall steps required to program a robot. Design Phase Strategy - What is the team strategy for autonomous mode? Subsystems What subsystems will you have on your robot? What does each subsystem need to do? What sensors should be used, if any? How many actuators does each subsystem need? Controllers How many controllers is needed to control this robot? What commands should be mapped to which buttons? Programming Phase Subsystems Create objects (sensors.actuators, etc.) in Java Program methods to control Commands need to be created, calling from subsystem methods Autonomous routines need to be created (optional for 2019) Testing Test code & fix bugs Look for new ways to do things smarter and more efficiently Golden Rule: Your code doesnt work until you've tested it on the robot Example Lets say we want to design an arm that will lift a game object. The arm will squeeze ball with pistons, and then lift the ball. From a programmer standpoint, here is an example of our thought process. Design Phase Our arm will need to lift a game piece to a certain height This means you need at least one motor to lift your arm This means you may need a sensor , like an encoder so you know the height of your arm Our arm will need to squeeze the ball with pistons We will need a solenoid to activate our pistons We will need an air compressor to generate air Programming Phase Subsystems Need to create motor controller , encoder , solenoid , and compressor in Java Method/Command examples Lift Arm Lower Arm Stop Arm Squeeze Ball Release Ball","title":"FRC Programming Outline"},{"location":"design/#overview","text":"This page summarizes the overall steps required to program a robot.","title":"Overview"},{"location":"design/#design-phase","text":"Strategy - What is the team strategy for autonomous mode? Subsystems What subsystems will you have on your robot? What does each subsystem need to do? What sensors should be used, if any? How many actuators does each subsystem need? Controllers How many controllers is needed to control this robot? What commands should be mapped to which buttons?","title":"Design Phase"},{"location":"design/#programming-phase","text":"Subsystems Create objects (sensors.actuators, etc.) in Java Program methods to control Commands need to be created, calling from subsystem methods Autonomous routines need to be created (optional for 2019)","title":"Programming Phase"},{"location":"design/#testing","text":"Test code & fix bugs Look for new ways to do things smarter and more efficiently Golden Rule: Your code doesnt work until you've tested it on the robot","title":"Testing"},{"location":"design/#example","text":"Lets say we want to design an arm that will lift a game object. The arm will squeeze ball with pistons, and then lift the ball. From a programmer standpoint, here is an example of our thought process.","title":"Example"},{"location":"design/#design-phase_1","text":"Our arm will need to lift a game piece to a certain height This means you need at least one motor to lift your arm This means you may need a sensor , like an encoder so you know the height of your arm Our arm will need to squeeze the ball with pistons We will need a solenoid to activate our pistons We will need an air compressor to generate air","title":"Design Phase"},{"location":"design/#programming-phase_1","text":"Subsystems Need to create motor controller , encoder , solenoid , and compressor in Java Method/Command examples Lift Arm Lower Arm Stop Arm Squeeze Ball Release Ball","title":"Programming Phase"},{"location":"pneumatics/","text":"Overview This page summarizes the overall steps required to program a pneumatic system. Pneumatics are controlled by the Pneumatic Control Module (PCM), which is wired to the pneumatic components. Like any other actuator, the compressor and pneumatic solenoid (the thing that controls the cylinder ) need to be declared. Each pneumatic component is controlled based on the node it is plugged in on the PCM (0-7), as seen below: Operating a compressor A compressor pumps air into the system. Instantiating a compressor The number corresponds with the PCM Node ID. Compressor COMPRESSORNAME = new Compressor(0); Starting a compressor COMPRESSORNAME.setClosedLoopControl(true); Stopping a compressor COMPRESSORNAME.setClosedLoopControl(false); Reading compressor status boolean enabled = COMPRESSORNAME.enabled boolean pressureSwitch = COMPRESSORNAME.getPressureSwitchValue(); double current = COMPRESSORNAME.getCompressorCurrent(); Single Solenoids A single solenoid valve has one solenoid, and shifts when voltage is supplied to that solenoid. When voltage is removed, it shifts back to a \u201chome\u201d position. Solenoid exampleSolenoid = newSolenoid(1); exampleSolenoid.set(true); exampleSolenoid.set(false); The number corresponds with the Pneumatic Control Module (PCM) Node ID Double Solenoids A double solenoid has two solenoids, and when voltage is supplied to one (and not the other) the valve shifts. What this means is that the cylinder has no home position, so when power is cut, the valve will stay where it was at that time, and the cylinder will continue to do work in the direction is was working in Forward Channel - 1st channel, kforward Reverse channel - 2nd channel, kReverse DoubleSolenoid exampleDouble = new DoubleSolenoid(1, 2); exampleDouble.set(DoubleSolenoid.Value.kOff); exampleDouble.set(DoubleSolenoid.Value.kForward); exampleDouble.set(DoubleSolenoid.Value.kReverse); The number corresponds with the Pneumatic Control Module (PCM) Node ID","title":"Pneumatics"},{"location":"pneumatics/#overview","text":"This page summarizes the overall steps required to program a pneumatic system. Pneumatics are controlled by the Pneumatic Control Module (PCM), which is wired to the pneumatic components. Like any other actuator, the compressor and pneumatic solenoid (the thing that controls the cylinder ) need to be declared. Each pneumatic component is controlled based on the node it is plugged in on the PCM (0-7), as seen below:","title":"Overview"},{"location":"pneumatics/#operating-a-compressor","text":"A compressor pumps air into the system. Instantiating a compressor The number corresponds with the PCM Node ID. Compressor COMPRESSORNAME = new Compressor(0); Starting a compressor COMPRESSORNAME.setClosedLoopControl(true); Stopping a compressor COMPRESSORNAME.setClosedLoopControl(false);","title":"Operating a compressor"},{"location":"pneumatics/#reading-compressor-status","text":"boolean enabled = COMPRESSORNAME.enabled boolean pressureSwitch = COMPRESSORNAME.getPressureSwitchValue(); double current = COMPRESSORNAME.getCompressorCurrent();","title":"Reading compressor status"},{"location":"pneumatics/#single-solenoids","text":"A single solenoid valve has one solenoid, and shifts when voltage is supplied to that solenoid. When voltage is removed, it shifts back to a \u201chome\u201d position. Solenoid exampleSolenoid = newSolenoid(1); exampleSolenoid.set(true); exampleSolenoid.set(false); The number corresponds with the Pneumatic Control Module (PCM) Node ID","title":"Single Solenoids"},{"location":"pneumatics/#double-solenoids","text":"A double solenoid has two solenoids, and when voltage is supplied to one (and not the other) the valve shifts. What this means is that the cylinder has no home position, so when power is cut, the valve will stay where it was at that time, and the cylinder will continue to do work in the direction is was working in Forward Channel - 1st channel, kforward Reverse channel - 2nd channel, kReverse DoubleSolenoid exampleDouble = new DoubleSolenoid(1, 2); exampleDouble.set(DoubleSolenoid.Value.kOff); exampleDouble.set(DoubleSolenoid.Value.kForward); exampleDouble.set(DoubleSolenoid.Value.kReverse); The number corresponds with the Pneumatic Control Module (PCM) Node ID","title":"Double Solenoids"},{"location":"sensors/","text":"Overview Sensors are used to help the Robot understand the world around it. Gyros Gyros measure heading of the robot to determine what direction it is going in. 0 Degrees is defined as the angle the robot was facing when the gyro was last reset. Declaration (under public class SUBSYSTEM extends Subsystem) public static ADXRS450_Gyro GYRONAME; Instantiation GYRONAME = new ADXRS450_Gyro(); Usage GYRONAME.getAngle(); //Returns Gyro Angle relative to last reset heading GYRONAME.reset(); //Sets current heading to 0 degrees Encoders Encoders count the revolutions of an axle. By understanding how many times an axle/wheel rotates, we can estimate the distance traveled. AMT103-V - 5901's Drivetrain Encoder 5901 has used this encoder as a drivetrain encoder for years. Declaration (under public class SUBSYSTEM extends Subsystem) public static Encoder leftEncoder; Instantiation leftEncoder = new Encoder(0, 1, false, Encoder.EncodingType.k1X); Parameter Setting static double diameter = MEASURE_THIS; // inches static double distancePerRev = diameter * Math.PI; static int ticksPerRev = 2048; // what you set them to , before was 2048 leftEncoder = new Encoder(0, 1, false, Encoder.EncodingType.k1X); leftEncoder.setDistancePerPulse(distancePerRev / ticksPerRev); leftEncoder.setReverseDirection(true); //Depends on if your mechanism runs counterclockwise or clockwise leftEncoder.setMaxPeriod(.1); leftEncoder.setMinRate(10); leftEncoder.setSamplesToAverage(7); CTRE Magnetic Encoder - 5901's Mechanism Encoder Declaration (under public class SUBSYSTEM extends Subsystem) None! CTRE encoders are wired directly into a TalonSRX, which serves as the object Parameter Setting TALONNAME.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Absolute, 0,0); TALONNAME.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, 0,0); //Set current position to 0 int sensorPos=0; elevatorEbony1.setSelectedSensorPosition(sensorPos, 0,10); elevatorEbony1.configOpenloopRamp(1.5,0); elevatorIvory7.configOpenloopRamp(1.5,0); elevatorIvory7.set(com.ctre.phoenix.motorcontrol.ControlMode.Follower, 1); elevatorEbony1.configForwardSoftLimitThreshold(36000,0); elevatorEbony1.configReverseSoftLimitThreshold(0,0); elevatorEbony1.configForwardSoftLimitEnable(true, 0); elevatorEbony1.configReverseSoftLimitEnable(true, 0); elevatorEbony1.configNominalOutputForward(0, 0); elevatorEbony1.configNominalOutputReverse(0, 0); elevatorIvory7.configNominalOutputForward(0, 0); elevatorIvory7.configNominalOutputReverse(0, 0); elevatorEbony1.configPeakOutputForward(.5,0); elevatorEbony1.configPeakOutputReverse(-.5,0); elevatorIvory7.configPeakOutputForward(.5,0); elevatorIvory7.configPeakOutputReverse(-.5,0); Limit Switch public static DigitalInput elevatorUppyBoi6; public static DigitalInput elevatorlowyBoi7; elevatorUppyBoi6 = new DigitalInput(6);","title":"Programming Sensors (In Progress)"},{"location":"sensors/#overview","text":"Sensors are used to help the Robot understand the world around it.","title":"Overview"},{"location":"sensors/#gyros","text":"Gyros measure heading of the robot to determine what direction it is going in. 0 Degrees is defined as the angle the robot was facing when the gyro was last reset.","title":"Gyros"},{"location":"sensors/#declaration-under-public-class-subsystem-extends-subsystem","text":"public static ADXRS450_Gyro GYRONAME;","title":"Declaration (under public class SUBSYSTEM extends Subsystem)"},{"location":"sensors/#instantiation","text":"GYRONAME = new ADXRS450_Gyro();","title":"Instantiation"},{"location":"sensors/#usage","text":"GYRONAME.getAngle(); //Returns Gyro Angle relative to last reset heading GYRONAME.reset(); //Sets current heading to 0 degrees","title":"Usage"},{"location":"sensors/#encoders","text":"Encoders count the revolutions of an axle. By understanding how many times an axle/wheel rotates, we can estimate the distance traveled.","title":"Encoders"},{"location":"sensors/#amt103-v-5901s-drivetrain-encoder","text":"5901 has used this encoder as a drivetrain encoder for years.","title":"AMT103-V - 5901's Drivetrain Encoder"},{"location":"sensors/#declaration-under-public-class-subsystem-extends-subsystem_1","text":"public static Encoder leftEncoder;","title":"Declaration (under public class SUBSYSTEM extends Subsystem)"},{"location":"sensors/#instantiation_1","text":"leftEncoder = new Encoder(0, 1, false, Encoder.EncodingType.k1X);","title":"Instantiation"},{"location":"sensors/#parameter-setting","text":"static double diameter = MEASURE_THIS; // inches static double distancePerRev = diameter * Math.PI; static int ticksPerRev = 2048; // what you set them to , before was 2048 leftEncoder = new Encoder(0, 1, false, Encoder.EncodingType.k1X); leftEncoder.setDistancePerPulse(distancePerRev / ticksPerRev); leftEncoder.setReverseDirection(true); //Depends on if your mechanism runs counterclockwise or clockwise leftEncoder.setMaxPeriod(.1); leftEncoder.setMinRate(10); leftEncoder.setSamplesToAverage(7);","title":"Parameter Setting"},{"location":"sensors/#ctre-magnetic-encoder-5901s-mechanism-encoder","text":"","title":"CTRE Magnetic Encoder - 5901's Mechanism Encoder"},{"location":"sensors/#declaration-under-public-class-subsystem-extends-subsystem_2","text":"None! CTRE encoders are wired directly into a TalonSRX, which serves as the object","title":"Declaration (under public class SUBSYSTEM extends Subsystem)"},{"location":"sensors/#parameter-setting_1","text":"TALONNAME.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Absolute, 0,0); TALONNAME.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, 0,0); //Set current position to 0 int sensorPos=0; elevatorEbony1.setSelectedSensorPosition(sensorPos, 0,10); elevatorEbony1.configOpenloopRamp(1.5,0); elevatorIvory7.configOpenloopRamp(1.5,0); elevatorIvory7.set(com.ctre.phoenix.motorcontrol.ControlMode.Follower, 1); elevatorEbony1.configForwardSoftLimitThreshold(36000,0); elevatorEbony1.configReverseSoftLimitThreshold(0,0); elevatorEbony1.configForwardSoftLimitEnable(true, 0); elevatorEbony1.configReverseSoftLimitEnable(true, 0); elevatorEbony1.configNominalOutputForward(0, 0); elevatorEbony1.configNominalOutputReverse(0, 0); elevatorIvory7.configNominalOutputForward(0, 0); elevatorIvory7.configNominalOutputReverse(0, 0); elevatorEbony1.configPeakOutputForward(.5,0); elevatorEbony1.configPeakOutputReverse(-.5,0); elevatorIvory7.configPeakOutputForward(.5,0); elevatorIvory7.configPeakOutputReverse(-.5,0);","title":"Parameter Setting"},{"location":"sensors/#limit-switch","text":"public static DigitalInput elevatorUppyBoi6; public static DigitalInput elevatorlowyBoi7; elevatorUppyBoi6 = new DigitalInput(6);","title":"Limit Switch"},{"location":"subsystems/","text":"Overview Subsystems represent a major component of the robot, such as the drivetrain, an arm, or a shooter. The methods (or functions) within a subsystem control specific motors. In this section, you will create a subsytem and create motor controller/sensor objects. You will then create the methods that control these components. Creating Subsystems To create a subsystem, right click subsystems in the explorer and select Create a new class/command . Select subsystem , and then name the subsystem appropriately. After you have finished, you have created a subsystem. In the example below, I created a \"Elevator\" subsystem. Adding Motor Controllers/Sensors Now that we have a subsystem, we will need to define the motor controllers and sensors. In Java, you must first create the object. There are two things you need to know: How many motor controllers do you need to add? (A 4 motor drivetrain requires 4 motor controllers) What type of motor controller is being used? (TalonSRX, VictorSPX, Sparks, etc.) If you are using TalonSRX Declaration - Place this under public class NAME extends Subsystem private WPI_TalonSRX leftElevatorMotor; Instantiate/Initializing (create an object) The number corresponds to the CANId of the motor controller. leftElevatorMotor = new WPI_TalonSRX(1); If you are using VictorSPX Declaration - Place this under public class NAME extends Subsystem private WPI_VictorSPX leftElevatorMotor; Instantiate/Initializing (create an object) The number corresponds to the CANId of the motor controller. leftElevatorMotor = new WPI_VictorSPX(1); Creating Methods A method is a function of the subsystem. For example, some functions of an elevator may be to lift to a certain height, lower, or to stop. To make an elevator stop, the example method is created to stop the elevator. public void stopElevator(){ leftElevatorMotor.set(0.0); } This sets the elevator motor that we created earlier at 0 percent voltage. Default Commands Each subsystem can be assigned a default command. If a subsystem is not running anything, the default command will always be run. When would you want this? When you want something to always be running by default. For example, our drivetrain command always runs a DefaultDrive command that constantly checks to see if the joystick value has changed. If you need to have a default command, add the following code to public void initDefaultCommand() setDefaultCommand(new COMMANDNAME));","title":"Programming Subsystems"},{"location":"subsystems/#overview","text":"Subsystems represent a major component of the robot, such as the drivetrain, an arm, or a shooter. The methods (or functions) within a subsystem control specific motors. In this section, you will create a subsytem and create motor controller/sensor objects. You will then create the methods that control these components.","title":"Overview"},{"location":"subsystems/#creating-subsystems","text":"To create a subsystem, right click subsystems in the explorer and select Create a new class/command . Select subsystem , and then name the subsystem appropriately. After you have finished, you have created a subsystem. In the example below, I created a \"Elevator\" subsystem.","title":"Creating Subsystems"},{"location":"subsystems/#adding-motor-controllerssensors","text":"Now that we have a subsystem, we will need to define the motor controllers and sensors. In Java, you must first create the object. There are two things you need to know: How many motor controllers do you need to add? (A 4 motor drivetrain requires 4 motor controllers) What type of motor controller is being used? (TalonSRX, VictorSPX, Sparks, etc.)","title":"Adding Motor Controllers/Sensors"},{"location":"subsystems/#if-you-are-using-talonsrx","text":"","title":"If you are using TalonSRX"},{"location":"subsystems/#declaration-place-this-under-public-class-name-extends-subsystem","text":"private WPI_TalonSRX leftElevatorMotor;","title":"Declaration - Place this under public class NAME extends Subsystem"},{"location":"subsystems/#instantiateinitializing-create-an-object","text":"The number corresponds to the CANId of the motor controller. leftElevatorMotor = new WPI_TalonSRX(1);","title":"Instantiate/Initializing (create an object)"},{"location":"subsystems/#if-you-are-using-victorspx","text":"","title":"If you are using VictorSPX"},{"location":"subsystems/#declaration-place-this-under-public-class-name-extends-subsystem_1","text":"private WPI_VictorSPX leftElevatorMotor;","title":"Declaration - Place this under public class NAME extends Subsystem"},{"location":"subsystems/#instantiateinitializing-create-an-object_1","text":"The number corresponds to the CANId of the motor controller. leftElevatorMotor = new WPI_VictorSPX(1);","title":"Instantiate/Initializing (create an object)"},{"location":"subsystems/#creating-methods","text":"A method is a function of the subsystem. For example, some functions of an elevator may be to lift to a certain height, lower, or to stop. To make an elevator stop, the example method is created to stop the elevator. public void stopElevator(){ leftElevatorMotor.set(0.0); } This sets the elevator motor that we created earlier at 0 percent voltage.","title":"Creating Methods"},{"location":"subsystems/#default-commands","text":"Each subsystem can be assigned a default command. If a subsystem is not running anything, the default command will always be run. When would you want this? When you want something to always be running by default. For example, our drivetrain command always runs a DefaultDrive command that constantly checks to see if the joystick value has changed. If you need to have a default command, add the following code to public void initDefaultCommand() setDefaultCommand(new COMMANDNAME));","title":"Default Commands"},{"location":"update/","text":"Overview Every year, new software is released. Our robot electronics need to be updated to have the latest changes. Installing Java Development Environment We use the program VSCode to program our robot. This only needs to be done for new computers that do not have VSCode. https://wpilib.screenstepslive.com/s/currentCS/m/getting_started/l/999999-installing-c-and-java-development-tools-for-frc Installing FRC Update Suite FRC Suite includes all of the FRC specific updates for the season. You will need an NI account and the license key to complete this step. See lead mentor for this information. https://wpilib.screenstepslive.com/s/currentCS/m/getting_started/l/1004055-installing-the-frc-update-suite-all-languages Imaging RoboRio The RoboRio is the brain of the robot, and needs to be updated for the new season. To do this step, the computer must have the FRC Update Suite installed. The RoboRio must also be correctly powered to the Power Distribution Panel. https://wpilib.screenstepslive.com/s/currentCS/m/getting_started/l/1009233-imaging-your-roborio CTRE libraries and updating CAN Firmware To do this step, the electrical board must be completely wired. The CTRE library includes updates to software if you use TalonSRXs or Victor SPXs. http://www.ctr-electronics.com/control-system/hro.html#product_tabs_technical_resources Download and run the latest CTRE Pheonix Framework Installer. To install the web plugin, plug in the usb cable for imaging the RoboRio into the computer and Roborio. Open the Pheonix Tuner on the desktop, select roboRio upgrade tab, and select update Rio Web-based config To update the CAN software, we need to download the firmware from CTR. Download the latest Talon SRX Firmware. http://www.ctr-electronics.com/talon-srx.html#product_tabs_technical_resources After doing that, go to the CAN devices tab in the Pheonix Tuner. Select the firmware CRF file that you just downloaded, check the update all devices with matching type box, and then click update device. Assigning CAN IDs To do this step, the electrical board must be completely wired. Open the Pheonix Tuner from the desktop. Click on the CAN devices laptop. You can select CAN devices from this window. If none appear, then there is a wiring issue with the CAN bus At the bottom is a General Device Configuration window. Use this to change the ID of the motor controllers. Use the blink button to determine which controller is the one selected. Number the motor controllers based on the following 5901 convention: Left controllers - Odd numbers, from front to back (1,3,5,7, etc.) Right controllers - Even numbers, from front to back (2,4,6,8, etc.) Imaging Radio The Radio is how the laptop communicates to the Robot, and needs to be updated. https://wpilib.screenstepslive.com/s/currentCS/m/getting_started/l/144986-programming-your-radio","title":"Updating Hardware"},{"location":"update/#overview","text":"Every year, new software is released. Our robot electronics need to be updated to have the latest changes.","title":"Overview"},{"location":"update/#installing-java-development-environment","text":"We use the program VSCode to program our robot. This only needs to be done for new computers that do not have VSCode. https://wpilib.screenstepslive.com/s/currentCS/m/getting_started/l/999999-installing-c-and-java-development-tools-for-frc","title":"Installing Java Development Environment"},{"location":"update/#installing-frc-update-suite","text":"FRC Suite includes all of the FRC specific updates for the season. You will need an NI account and the license key to complete this step. See lead mentor for this information. https://wpilib.screenstepslive.com/s/currentCS/m/getting_started/l/1004055-installing-the-frc-update-suite-all-languages","title":"Installing FRC Update Suite"},{"location":"update/#imaging-roborio","text":"The RoboRio is the brain of the robot, and needs to be updated for the new season. To do this step, the computer must have the FRC Update Suite installed. The RoboRio must also be correctly powered to the Power Distribution Panel. https://wpilib.screenstepslive.com/s/currentCS/m/getting_started/l/1009233-imaging-your-roborio","title":"Imaging RoboRio"},{"location":"update/#ctre-libraries-and-updating-can-firmware","text":"To do this step, the electrical board must be completely wired. The CTRE library includes updates to software if you use TalonSRXs or Victor SPXs. http://www.ctr-electronics.com/control-system/hro.html#product_tabs_technical_resources Download and run the latest CTRE Pheonix Framework Installer. To install the web plugin, plug in the usb cable for imaging the RoboRio into the computer and Roborio. Open the Pheonix Tuner on the desktop, select roboRio upgrade tab, and select update Rio Web-based config To update the CAN software, we need to download the firmware from CTR. Download the latest Talon SRX Firmware. http://www.ctr-electronics.com/talon-srx.html#product_tabs_technical_resources After doing that, go to the CAN devices tab in the Pheonix Tuner. Select the firmware CRF file that you just downloaded, check the update all devices with matching type box, and then click update device.","title":"CTRE libraries and updating CAN Firmware"},{"location":"update/#assigning-can-ids","text":"To do this step, the electrical board must be completely wired. Open the Pheonix Tuner from the desktop. Click on the CAN devices laptop. You can select CAN devices from this window. If none appear, then there is a wiring issue with the CAN bus At the bottom is a General Device Configuration window. Use this to change the ID of the motor controllers. Use the blink button to determine which controller is the one selected. Number the motor controllers based on the following 5901 convention: Left controllers - Odd numbers, from front to back (1,3,5,7, etc.) Right controllers - Even numbers, from front to back (2,4,6,8, etc.)","title":"Assigning CAN IDs"},{"location":"update/#imaging-radio","text":"The Radio is how the laptop communicates to the Robot, and needs to be updated. https://wpilib.screenstepslive.com/s/currentCS/m/getting_started/l/144986-programming-your-radio","title":"Imaging Radio"},{"location":"vision/","text":"Overview Vision can be used to aim the robot. It is most suitable to use when targets are easily distinguishable (bright yellow cubes, orange balls), or for games that have lots of vision targets. Implementing vision has two steps: Vision detection (easy) - Camera can detect the target reliably without confusing it with surrounding o bjects Vision integration (hard) - Combining vision with the robot Team 5901 utilzes the Limelight Camera. Getting Started Informating about mounting, wiring, imaging, and setting up the limelight http://docs.limelightvision.io/en/latest/ import edu.wpi.first.networktables.NetworkTableEntry; import edu.wpi.first.networktables.NetworkTableInstance; public void robotInit() { NetworkTableInstance.getDefault().getTable(\"limelight\").getEntry(\"ledMode\").setNumber(0);","title":"Vision (In Progress)"},{"location":"vision/#overview","text":"Vision can be used to aim the robot. It is most suitable to use when targets are easily distinguishable (bright yellow cubes, orange balls), or for games that have lots of vision targets. Implementing vision has two steps: Vision detection (easy) - Camera can detect the target reliably without confusing it with surrounding o bjects Vision integration (hard) - Combining vision with the robot Team 5901 utilzes the Limelight Camera.","title":"Overview"},{"location":"vision/#getting-started","text":"Informating about mounting, wiring, imaging, and setting up the limelight http://docs.limelightvision.io/en/latest/ import edu.wpi.first.networktables.NetworkTableEntry; import edu.wpi.first.networktables.NetworkTableInstance; public void robotInit() { NetworkTableInstance.getDefault().getTable(\"limelight\").getEntry(\"ledMode\").setNumber(0);","title":"Getting Started"}]}