{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Programming Guide! For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-the-programming-guide","text":"For full documentation visit mkdocs.org .","title":"Welcome to the Programming Guide!"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"","title":"About"},{"location":"commands/","text":"Overview Commands are used to execute robot functions. Commands call methods of subsystems to execute a task. Creating Commands To create a command, right click subsystems in the explorer and select Create a new class/command . Select command , and then name the command appropriately: NAME Command. For example, the command to stop an elevator should be named stopElevator Command. Calling Subsystem Methods The command requests the subsystem to perform a function. For example, stopElevatorCommand will call on subsystem Elevator, and it's method stopElevator using the following code elevator.stopElevator(); The next question is, where should this code be placed? See the next section for details. Code Placement public stopElevatorCommand() - If this command requires complete control of the subsystem, add the following code to this section (replace Elevator with subsystem name): requires(Elevator); Example: What happens if raiseElevatorCommand is run the same time as lowerElevatorCommand ? To ensure both never run at the same time, we should require the subsystem for both commands. protected void initialize() - Code placed here will one run once when the command is run protected void execute() - Code placed here will run continously as long as the command is running protected void isFinished() - Code placed here determines when the command stops protected void end() - Code placed here runs once the command is over protected void interrupted() - Code placed here runs if the commands is interrupted by another command that requires the subsystem","title":"Commmands"},{"location":"commands/#overview","text":"Commands are used to execute robot functions. Commands call methods of subsystems to execute a task.","title":"Overview"},{"location":"commands/#creating-commands","text":"To create a command, right click subsystems in the explorer and select Create a new class/command . Select command , and then name the command appropriately: NAME Command. For example, the command to stop an elevator should be named stopElevator Command.","title":"Creating Commands"},{"location":"commands/#calling-subsystem-methods","text":"The command requests the subsystem to perform a function. For example, stopElevatorCommand will call on subsystem Elevator, and it's method stopElevator using the following code elevator.stopElevator(); The next question is, where should this code be placed? See the next section for details.","title":"Calling Subsystem Methods"},{"location":"commands/#code-placement","text":"public stopElevatorCommand() - If this command requires complete control of the subsystem, add the following code to this section (replace Elevator with subsystem name): requires(Elevator); Example: What happens if raiseElevatorCommand is run the same time as lowerElevatorCommand ? To ensure both never run at the same time, we should require the subsystem for both commands. protected void initialize() - Code placed here will one run once when the command is run protected void execute() - Code placed here will run continously as long as the command is running protected void isFinished() - Code placed here determines when the command stops protected void end() - Code placed here runs once the command is over protected void interrupted() - Code placed here runs if the commands is interrupted by another command that requires the subsystem","title":"Code Placement"},{"location":"controllers/","text":"Overview Commands are used to execute robot functions. Commands call methods of subsystems to execute a task. Creating Commands To create a command, right click subsystems in the explorer and select Create a new class/command . Select command , and then name the command appropriately: NAME Command. For example, the command to stop an elevator should be named stopElevator Command. Calling Subsystem Methods The command requests the subsystem to perform a function. For example, stopElevatorCommand will call on subsystem Elevator, and it's method stopElevator using the following code elevator.stopElevator(); The next question is, where should this code be placed? See the next section for details. Code Placement public stopElevatorCommand() - If this command requires complete control of the subsystem, add the following code to this section (replace Elevator with subsystem name): requires(Elevator); Example: What happens if raiseElevatorCommand is run the same time as lowerElevatorCommand ? To ensure both never run at the same time, we should require the subsystem for both commands. protected void initialize() - Code placed here will one run once when the command is run protected void execute() - Code placed here will run continously as long as the command is running protected void isFinished() - Code placed here determines when the command stops protected void end() - Code placed here runs once the command is over protected void interrupted() - Code placed here runs if the commands is interrupted by another command that requires the subsystem","title":"Controller Mapping"},{"location":"controllers/#overview","text":"Commands are used to execute robot functions. Commands call methods of subsystems to execute a task.","title":"Overview"},{"location":"controllers/#creating-commands","text":"To create a command, right click subsystems in the explorer and select Create a new class/command . Select command , and then name the command appropriately: NAME Command. For example, the command to stop an elevator should be named stopElevator Command.","title":"Creating Commands"},{"location":"controllers/#calling-subsystem-methods","text":"The command requests the subsystem to perform a function. For example, stopElevatorCommand will call on subsystem Elevator, and it's method stopElevator using the following code elevator.stopElevator(); The next question is, where should this code be placed? See the next section for details.","title":"Calling Subsystem Methods"},{"location":"controllers/#code-placement","text":"public stopElevatorCommand() - If this command requires complete control of the subsystem, add the following code to this section (replace Elevator with subsystem name): requires(Elevator); Example: What happens if raiseElevatorCommand is run the same time as lowerElevatorCommand ? To ensure both never run at the same time, we should require the subsystem for both commands. protected void initialize() - Code placed here will one run once when the command is run protected void execute() - Code placed here will run continously as long as the command is running protected void isFinished() - Code placed here determines when the command stops protected void end() - Code placed here runs once the command is over protected void interrupted() - Code placed here runs if the commands is interrupted by another command that requires the subsystem","title":"Code Placement"},{"location":"design/","text":"Overview This page summarizes the overall steps required to program a robot. Programming is iterative - you may need to repeat many of these steps as the season continues. Design Strategy - What is the team strategy for autonomous mode? Subsystems What subsystems will you have on your robot? What does each subsystem need to do? What sensors should be used, if any? Controllers How many controllers is needed to control this robot? What commands should be mapped to which buttons? Programming Motor Assignments Motor controller CAN IDs (Work with Electrical Team) Methods that control motors must be created Commands need to be created Commands should call methods from subsystems Autonomous routines need to be created Will use CommandGroups of commands Testing Golden Rule: Your code doesnt work until you've tested it on the robot Example - 2017 Steamworks - Design Strategy - Our team strategy is to start from three possible locations, meaning we need three different autonomous modes. We will try to place a gear in autonomous mode. Subsystems Drivetrain Sensors - Encoder (measure distance), Gyro (measure angle) Functions Drive Straight Turn to an angle Turbo speed Stop Intake Sensors - Encoder (measure how open intake is) Open intake Close intake Commands Controllers Controller 1 - Driving Controller 2 - Control intake Example - 2017 Steamworks Programming Subsystems need to be created Drivetrain motors (4x) - 1,2,3,4 Intake motors (1x) - 5 Create methods Commands created Autonomous routines Left Position Auto - Drive straight 1m, turn -60 degrees, drive straight 1m, open intake Middle Position Auto - Drive straight 1m, open intake Right Position Auto - Drive straight 1m, turn 60 degrees, drive straight 1m, open intake","title":"FRC Programming Outline"},{"location":"design/#overview","text":"This page summarizes the overall steps required to program a robot. Programming is iterative - you may need to repeat many of these steps as the season continues.","title":"Overview"},{"location":"design/#design","text":"Strategy - What is the team strategy for autonomous mode? Subsystems What subsystems will you have on your robot? What does each subsystem need to do? What sensors should be used, if any? Controllers How many controllers is needed to control this robot? What commands should be mapped to which buttons?","title":"Design"},{"location":"design/#programming","text":"Motor Assignments Motor controller CAN IDs (Work with Electrical Team) Methods that control motors must be created Commands need to be created Commands should call methods from subsystems Autonomous routines need to be created Will use CommandGroups of commands","title":"Programming"},{"location":"design/#testing","text":"Golden Rule: Your code doesnt work until you've tested it on the robot","title":"Testing"},{"location":"design/#example-2017-steamworks-design","text":"Strategy - Our team strategy is to start from three possible locations, meaning we need three different autonomous modes. We will try to place a gear in autonomous mode. Subsystems Drivetrain Sensors - Encoder (measure distance), Gyro (measure angle) Functions Drive Straight Turn to an angle Turbo speed Stop Intake Sensors - Encoder (measure how open intake is) Open intake Close intake Commands Controllers Controller 1 - Driving Controller 2 - Control intake","title":"Example - 2017 Steamworks - Design"},{"location":"design/#example-2017-steamworks-programming","text":"Subsystems need to be created Drivetrain motors (4x) - 1,2,3,4 Intake motors (1x) - 5 Create methods Commands created Autonomous routines Left Position Auto - Drive straight 1m, turn -60 degrees, drive straight 1m, open intake Middle Position Auto - Drive straight 1m, open intake Right Position Auto - Drive straight 1m, turn 60 degrees, drive straight 1m, open intake","title":"Example - 2017 Steamworks Programming"},{"location":"subsystems/","text":"Overview Subsystems represent a unique aspect of the robot. They are composed of motor controllers and sensors. The methods (or functions) within a subsystem control specific motors. Creating Subsystems To create a subsystem, right click subsystems in the explorer and select Create a new class/command . Select subsystem , and then name the subsystem appropriately. After you have finished, you have created a subsystem. In the example below, I created a \"Elevator\" subsystem. Adding Motor Controllers/Sensors Now that we have a subsystem, we will need to define the motor controllers and sensors. In Java, you must first create the object. Add however many motor controllers is needed to operate your subsystem, depending on what motor controller will be used for the subsystem (consult with electrical team to find out). TalonSRX Declaration - private WPI_TalonSRX leftElevatorMotor; Instantiate/Initializing (create an object) The number corresponds to the CANId of the motor controller leftElevatorMotor = new WPI_TalonSRX(1); VictorSPX Declaration (assign variable name to object) private WPI_VictorSPX leftElevatorMotor; Instantiate/Initializing (create an object) The number corresponds to the CANId of the motor controller leftElevatorMotor = new WPI_VictorSPX(1); Creating Methods A method is a function of the subsystem. For example, some functions of an elevator may be to lift to a certain height, lower, or to stop. To make an elevator stop, the example method is created to stop the elevator. public void stopElevator(){ leftElevatorMotor.set(0.0); } This sets the elevator motor that we created earlier at 0 percent voltage.","title":"Subsystems"},{"location":"subsystems/#overview","text":"Subsystems represent a unique aspect of the robot. They are composed of motor controllers and sensors. The methods (or functions) within a subsystem control specific motors.","title":"Overview"},{"location":"subsystems/#creating-subsystems","text":"To create a subsystem, right click subsystems in the explorer and select Create a new class/command . Select subsystem , and then name the subsystem appropriately. After you have finished, you have created a subsystem. In the example below, I created a \"Elevator\" subsystem.","title":"Creating Subsystems"},{"location":"subsystems/#adding-motor-controllerssensors","text":"Now that we have a subsystem, we will need to define the motor controllers and sensors. In Java, you must first create the object. Add however many motor controllers is needed to operate your subsystem, depending on what motor controller will be used for the subsystem (consult with electrical team to find out).","title":"Adding Motor Controllers/Sensors"},{"location":"subsystems/#talonsrx","text":"Declaration - private WPI_TalonSRX leftElevatorMotor; Instantiate/Initializing (create an object) The number corresponds to the CANId of the motor controller leftElevatorMotor = new WPI_TalonSRX(1);","title":"TalonSRX"},{"location":"subsystems/#victorspx","text":"Declaration (assign variable name to object) private WPI_VictorSPX leftElevatorMotor; Instantiate/Initializing (create an object) The number corresponds to the CANId of the motor controller leftElevatorMotor = new WPI_VictorSPX(1);","title":"VictorSPX"},{"location":"subsystems/#creating-methods","text":"A method is a function of the subsystem. For example, some functions of an elevator may be to lift to a certain height, lower, or to stop. To make an elevator stop, the example method is created to stop the elevator. public void stopElevator(){ leftElevatorMotor.set(0.0); } This sets the elevator motor that we created earlier at 0 percent voltage.","title":"Creating Methods"}]}